<?php
/**
 * üè™ THE TRENDY STATION - FIXED AUTO SETUP SCRIPT
 * Fixed version - No DELIMITER issues
 * Version: 2.1
 */

error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "========================================\n";
echo "üè™ THE TRENDY STATION - AUTO SETUP SCRIPT\n";
echo "==========================================\n\n";

// Function to print colored output
function printStatus($message, $status = 'info') {
    $colors = [
        'success' => "\033[0;32m",
        'error' => "\033[0;31m", 
        'warning' => "\033[0;33m",
        'info' => "\033[0;34m",
        'reset' => "\033[0m"
    ];
    
    $icon = [
        'success' => '‚úÖ',
        'error' => '‚ùå',
        'warning' => '‚ö†Ô∏è',
        'info' => 'üîç'
    ];
    
    echo $colors[$status] . $icon[$status] . " " . $message . $colors['reset'] . "\n";
}

// Check environment
printStatus("Checking environment...", 'info');
printStatus("PHP Version: " . PHP_VERSION, 'info');

$required_extensions = ['pdo_mysql', 'json', 'mbstring'];
foreach ($required_extensions as $ext) {
    if (extension_loaded($ext)) {
        printStatus("Extension $ext: ‚úÖ", 'success');
    } else {
        printStatus("Extension $ext: ‚ùå Missing!", 'error');
        exit(1);
    }
}

// Setup directories
printStatus("\nüìÅ Setting up directories...", 'info');
$directories = [
    'config', 'includes', 'pages', 'ajax', 
    'assets/css', 'assets/js', 'assets/images',
    'uploads', 'backups'
];

foreach ($directories as $dir) {
    if (!file_exists($dir)) {
        if (mkdir($dir, 0755, true)) {
            printStatus("Created directory: $dir ‚úÖ", 'success');
        } else {
            printStatus("Failed to create directory: $dir ‚ùå", 'error');
        }
    } else {
        printStatus("Directory exists: $dir ‚úÖ", 'success');
    }
}

// Database setup
printStatus("\nüóÑÔ∏è Setting up database...", 'info');
echo "Enter database configuration:\n";

// Get database config
$db_host = readline("Database Host [localhost]: ") ?: 'localhost';
$db_user = readline("Database Username [root]: ") ?: 'root';
$db_pass = readline("Database Password []: ");
$db_name = readline("Database Name [trendy_station]: ") ?: 'trendy_station';

try {
    // Connect without database first
    $pdo_temp = new PDO("mysql:host=$db_host", $db_user, $db_pass);
    $pdo_temp->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    // Create database if not exists
    $pdo_temp->exec("CREATE DATABASE IF NOT EXISTS `$db_name` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
    printStatus("Database '$db_name' created/verified ‚úÖ", 'success');
    
    // Connect to specific database
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_pass);    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    // Import database
    printStatus("Importing database.sql...", 'info');
    
    if (file_exists('database.sql')) {
        $sql_content = file_get_contents('database.sql');
          // Split by semicolon and execute each statement
        // Remove comments and empty lines first
        $sql_content = preg_replace('/^--.*$/m', '', $sql_content);
        $sql_content = preg_replace('/\/\*.*?\*\//s', '', $sql_content);
        
        $statements = array_filter(
            array_map('trim', explode(';', $sql_content)),
            function($stmt) {
                return !empty($stmt) && !preg_match('/^\s*$/', $stmt);
            }
        );
        
        $success_count = 0;
        $total_count = count($statements);
        
        foreach ($statements as $statement) {
            if (!empty(trim($statement))) {
                try {
                    $pdo->exec($statement);
                    $success_count++;
                } catch (PDOException $e) {
                    // Skip empty statements and comments
                    if (strpos($e->getMessage(), 'empty query') === false) {
                        printStatus("SQL Error: " . $e->getMessage(), 'warning');
                    }
                }
            }
        }
        
        printStatus("Database imported successfully! ($success_count/$total_count statements) ‚úÖ", 'success');
        
    } else {
        printStatus("database.sql not found! ‚ùå", 'error');
        exit(1);
    }
    
} catch (PDOException $e) {
    printStatus("Database setup failed: " . $e->getMessage() . " ‚ùå", 'error');
    exit(1);
}

// Create database config file
printStatus("\n‚öôÔ∏è Creating database config...", 'info');

// Escape special characters in password for PHP string
$escaped_password = addslashes($db_pass);

$config_content = "<?php
/**
 * Database Configuration - The Trendy Station
 * Auto-generated by setup script
 */

\$config = [
    'host' => '$db_host',
    'dbname' => '$db_name', 
    'username' => '$db_user',
    'password' => '$escaped_password',
    'charset' => 'utf8mb4',
    'options' => [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES => false,
    ]
];

// Create PDO connection
try {
    \$dsn = \"mysql:host={\$config['host']};dbname={\$config['dbname']};charset={\$config['charset']}\";
    \$pdo = new PDO(\$dsn, \$config['username'], \$config['password'], \$config['options']);
} catch (PDOException \$e) {
    die('Database connection failed: ' . \$e->getMessage());
}
?>";

if (file_put_contents('config/database.php', $config_content)) {
    printStatus("Database config created ‚úÖ", 'success');
} else {
    printStatus("Failed to create database config ‚ùå", 'error');
}

// Verify setup
printStatus("\n‚úÖ Verifying setup...", 'info');

try {
    // Test database connection
    require_once 'config/database.php';
    
    // Test some basic queries
    $stmt = $pdo->query("SELECT COUNT(*) as count FROM products");
    $product_count = $stmt->fetch()['count'];
    printStatus("Products in database: $product_count ‚úÖ", 'success');
    
    $stmt = $pdo->query("SELECT COUNT(*) as count FROM customers");
    $customer_count = $stmt->fetch()['count'];
    printStatus("Customers in database: $customer_count ‚úÖ", 'success');
    
    $stmt = $pdo->query("SELECT COUNT(*) as count FROM categories");
    $category_count = $stmt->fetch()['count'];
    printStatus("Categories in database: $category_count ‚úÖ", 'success');
    
} catch (Exception $e) {
    printStatus("Verification failed: " . $e->getMessage() . " ‚ùå", 'error');
}

// Create htaccess file
printStatus("\nüìÑ Creating .htaccess...", 'info');
$htaccess_content = "# The Trendy Station - URL Rewriting
RewriteEngine On

# Security headers
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options DENY
    Header always set X-XSS-Protection \"1; mode=block\"
</IfModule>

# Prevent access to sensitive files
<Files \"*.sql\">
    Order allow,deny
    Deny from all
</Files>

<Files \"*.log\">
    Order allow,deny
    Deny from all
</Files>

# Cache static files
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css \"access plus 1 month\"
    ExpiresByType application/javascript \"access plus 1 month\"
    ExpiresByType image/png \"access plus 1 month\"
    ExpiresByType image/jpg \"access plus 1 month\"
    ExpiresByType image/jpeg \"access plus 1 month\"
    ExpiresByType image/gif \"access plus 1 month\"
    ExpiresByType image/svg+xml \"access plus 1 month\"
</IfModule>

# Compress files
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>
";

if (file_put_contents('.htaccess', $htaccess_content)) {
    printStatus(".htaccess created ‚úÖ", 'success');
}

// Create uploads index file for security
$uploads_index = "<?php
// Security: Prevent directory listing
header('HTTP/1.0 403 Forbidden');
exit('Directory access is forbidden.');
?>";

file_put_contents('uploads/index.php', $uploads_index);

printStatus("\nüéâ SETUP COMPLETED SUCCESSFULLY!", 'success');
printStatus("==========================================", 'info');
printStatus("üåê Access your application at: http://localhost/trendy_station", 'info');
printStatus("üìä Database: $db_name on $db_host", 'info');
printStatus("üìÅ Project files: " . __DIR__, 'info');
printStatus("==========================================", 'info');

echo "\nüìã NEXT STEPS:\n";
echo "1. üåê Open: http://localhost/trendy_station\n";
echo "2. üß™ Test shortcuts: http://localhost/trendy_station/test_shortcuts.html\n";
echo "3. üìñ Read docs: README.md, STUDENT_GUIDE.md\n";
echo "4. üß™ Run tests: TEST_CASES.md\n";
echo "5. üöÄ Start using the system!\n\n";

echo "üîë DEFAULT LOGIN:\n";
echo "Username: admin\n";
echo "Password: admin123\n\n";

echo "üìû SUPPORT:\n";
echo "üìß Email: support@trendystation.com\n";
echo "üì± Phone: 1900-1234\n";
echo "üåê Website: www.trendystation.com\n\n";

echo "üéØ Enjoy using The Trendy Station! üéâ\n";
?>
